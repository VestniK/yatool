import json
import os

import app_config
import devtools.ya.build.gen_plan as gen_plan

import devtools.ya.test.dependency.testdeps as testdeps
import devtools.ya.test.dependency.uid as uid_gen
from . import cmdline

if app_config.in_house:
    import devtools.ya.test.dependency.sandbox_storage as sandbox_storage
    from . import sandbox

import devtools.ya.test.const
import devtools.ya.test.system.env as sysenv
import devtools.ya.test.test_types.fuzz_test as fuzz_test
import devtools.ya.test.util.shared as util_shared
import devtools.ya.test.util.tools as util_tools


def inject_fuzz_postprocess_nodes(arc_root, graph, suites, opts):
    def get_corpus_resources(suite):
        filename = util_tools.get_corpus_data_path(suite.project_path, arc_root)
        if os.path.exists(filename):
            with open(filename) as afile:
                try:
                    corpus_data = json.load(afile)
                except ValueError:
                    corpus_data = {}
            return corpus_data.get("corpus_parts", [])
        return []

    upload_nodes = []
    outputs = []
    for suite in suites:
        if suite.get_type() != fuzz_test.FUZZ_TEST_TYPE:
            continue

        output_file = suite.work_dir(devtools.ya.test.const.GENERATED_CORPUS_DIR_NAME + ".tar")

        resources = get_corpus_resources(suite)
        should_minimize = len(resources) > devtools.ya.test.const.MAX_CORPUS_RESOURCES_ALLOWED

        if (
            getattr(opts, 'fuzz_minimization_only', False)
            or getattr(opts, 'fuzz_force_minimization', False)
            or devtools.ya.test.const.YaTestTags.AlwaysMinimize in suite.tags
            or (should_minimize and not suite.corpus_parts_limit_exceeded)
        ):
            node, output_file = inject_fuzz_minimization_node(graph, suite, output_file, resources, opts)
            uids = [node["uid"]]
        else:
            # directly attach tests to the upload node
            uids = suite.result_uids

        if not opts.fuzz_local_store:
            node, output = inject_fuzz_upload_node(graph, suite, uids, output_file, should_minimize, opts)
            upload_nodes.append(node)
            outputs.append(output)

    if upload_nodes:
        inject_fuzz_result_node(arc_root, graph, suites, upload_nodes, outputs, opts)


def inject_fuzz_upload_node(graph, suite, deps, input_path, minimize, opts):
    node_log_path = suite.work_dir("fuzz_upload.log")
    node_output = suite.work_dir("sandbox_fuzz_resource.json")

    node_cmd = util_tools.get_test_tool_cmd(opts, "upload", suite.global_resources) + [
        "--target",
        input_path,
        "--output",
        node_output,
        "--sandbox",
        opts.sandbox_url,
        "--type",
        "FUZZ_CORPUS_DATA",
        "--description",
        "Automatically mined data for {}".format(suite.project_path),
        "--meta-info",
        json.dumps({"project_path": suite.project_path, "minimized": minimize}),
        "--resource-ttl",
        str(opts.ttl),
        "--log-path",
        node_log_path,
        "--skip-fileless-tar",
        "--log-level",
        "DEBUG",
    ]

    if opts.resource_owner:
        node_cmd += ["--owner", opts.resource_owner]
    node_cmd += util_shared.get_oauth_token_options(opts)
    if opts.ssh_keys:
        for i in opts.ssh_keys:
            node_cmd += ["--ssh-key", i]
    if opts.username:
        node_cmd += ["--ssh-user", opts.username]
    # TODO rename
    if opts.canonization_transport:
        node_cmd += ["--transport", opts.canonization_transport]

    node = {
        "node-type": devtools.ya.test.const.NodeType.TEST_AUX,
        "broadcast": False,
        "inputs": [input_path],
        "uid": uid_gen.get_uid(deps, "fuzz_upload"),
        "cwd": "$(BUILD_ROOT)",
        "priority": 0,
        "deps": testdeps.unique(deps),
        "cache": True,
        "target_properties": {
            "module_lang": suite.meta.module_lang,
        },
        "outputs": [node_log_path, node_output],
        "kv": {
            "p": "UL",
            "pc": "light-cyan",
            "show_out": True,
        },
        "requirements": gen_plan.get_requirements(
            opts,
            {
                "network": "full",
            },
        ),
        "cmds": [
            {
                "cmd_args": node_cmd,
                "cwd": "$(BUILD_ROOT)",
            },
        ],
    }
    graph.append_node(node)
    return node, node_output


def inject_fuzz_minimization_node(graph, suite, corpus_path, resources, opts):
    node_log_path = suite.work_dir("fuzz_minimize_corpus.log")
    output_corpus_path = suite.work_dir("minimized_corpus.tar")

    target_binary = suite.binary_path('$(BUILD_ROOT)')
    test_meta_path = suite.work_dir("meta.json")
    inputs = [corpus_path, target_binary, test_meta_path]
    # node uses binary generated by linker (suite.dep_uids) and mined_corpus.tar generated by suite (suite.uid)
    deps = suite.dep_uids + [suite.uid]

    if app_config.in_house:
        storage = sandbox_storage.get_sandbox_storage("$(BUILD_ROOT)", opts.custom_fetcher, opts.oauth_token)
        for resource in resources:
            resource_node_uid = sandbox.inject_download_sandbox_resource_node(
                graph, resource, opts, suite.global_resources
            )
            outputs = storage.get_sandbox_fetcher_output_paths(resource)
            inputs.extend(outputs)
            deps.append(resource_node_uid)

    inputs += testdeps.get_suite_requested_input(suite, opts)

    node_cmd = util_tools.get_test_tool_cmd(opts, "minimize_fuzz_corpus", suite.global_resources) + [
        "--fuzz-binary",
        target_binary,
        "--target",
        corpus_path,
        "--output",
        output_corpus_path,
        "--test-meta",
        test_meta_path,
        "--log-path",
        node_log_path,
        # "--log-level", "DEBUG"
    ]

    for resource in resources:
        node_cmd += ["--corpus-sandbox-resource", str(resource)]

    # options below are required only for test environment
    if app_config.in_house:
        for resource in testdeps.get_test_sandbox_resources(suite):
            node_cmd.extend(["--sandbox-resource", str(resource)])
            resource_node_uid = sandbox.inject_download_sandbox_resource_node(
                graph, resource, opts, suite.global_resources
            )
            deps.append(resource_node_uid)

    if suite.test_run_cwd:
        node_cmd += ["--test-run-cwd", suite.test_run_cwd]

    node_cmd += cmdline.get_environment_relative_options(suite, opts)
    env = sysenv.get_common_py_env()
    sysenv.update_test_initial_env_vars(env, suite, opts)

    node = {
        "node-type": devtools.ya.test.const.NodeType.TEST_AUX,
        "broadcast": False,
        "inputs": testdeps.unique(inputs),
        "uid": uid_gen.get_uid(suite.result_uids, "fuzz_minimize"),
        "cwd": "$(BUILD_ROOT)",
        "env": env.dump(),
        "priority": 0,
        "deps": testdeps.unique(deps),
        "cache": True,
        "target_properties": {
            "module_lang": suite.meta.module_lang,
        },
        "outputs": [node_log_path, output_corpus_path],
        "kv": {
            "p": "FZ",
            "pc": "light-yellow",
            "show_out": True,
        },
        # node updates resource last usage time
        "requirements": gen_plan.get_requirements(
            opts,
            {
                "network": "full",
                "cpu": "all",
            },
        ),
        "timeout": 2400,
        "cmds": [
            {
                "cmd_args": node_cmd,
                "cwd": "$(BUILD_ROOT)",
            },
        ],
    }
    graph.append_node(node, add_to_result=True)
    return node, output_corpus_path


def inject_fuzz_result_node(arc_root, graph, suites, upload_nodes, input_files, opts):
    log_path = os.path.join("$(BUILD_ROOT)", "fuzz_result_node.log")
    result_path = os.path.join("$(BUILD_ROOT)", "fuzz_result_node.json")
    outputs = [log_path, result_path]
    all_resources = {}
    for suite in suites:
        all_resources.update(suite.global_resources)

    node_cmd = util_tools.get_test_tool_cmd(opts, "run_fuzz_result_node", all_resources) + [
        "--source-root",
        "$(SOURCE_ROOT)",
        "--build-root",
        "$(BUILD_ROOT)",
        "--output",
        result_path,
        "--log-path",
        log_path,
        # "--log-level", "DEBUG",
    ]

    for filename in input_files:
        node_cmd += ["--corpus-description", filename]

    for suite in suites:
        target = util_tools.get_corpus_data_path(suite.project_path)

        input_files.append(os.path.join("$(SOURCE_ROOT)", target))
        outputs.append(os.path.join("$(BUILD_ROOT)", target))

    node_uid = uid_gen.get_random_uid()
    # Make run_test depends on run_fuzz_result_node to make sure
    # mined data will be uploaded regardless of the test status and found errors.
    # Otherwise run_test will exit with rc=1 and graph execution will be terminated
    for suite in suites:
        suite._result_uids.append(node_uid)

    if not opts.use_distbuild and not opts.no_src_changes:
        node_cmd += ["--write-results-inplace"]

    node = {
        "node-type": devtools.ya.test.const.NodeType.TEST_AUX,
        "broadcast": False,
        "inputs": input_files,
        "uid": node_uid,
        "cache": False,
        "cwd": "$(BUILD_ROOT)",
        "priority": 0,
        "deps": testdeps.unique([node["uid"] for node in upload_nodes]),
        "target_properties": {},
        "outputs": outputs,
        "kv": {
            "p": "FZ",
            "pc": "yellow",
            "show_out": True,
        },
        "requirements": gen_plan.get_requirements(opts),
        "cmds": [
            {
                "cmd_args": node_cmd,
                "cwd": "$(BUILD_ROOT)",
            },
        ],
    }
    graph.append_node(node)
    return node
