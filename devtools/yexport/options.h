#pragma once

#include "std_helpers.h"
#include "dump.h"
#include "debug.h"

#include <util/generic/vector.h>

#include <filesystem>

namespace NYexport {

struct TLoggingOpts {
    bool EnableEvlog = false;
    bool EnableStderr = true;
    fs::path EvLogFilePath;
    bool FailOnError = false;
};

struct TOpts {
    fs::path ArcadiaRoot; // root of Arcadia sources
    fs::path ExportRoot; // root for generated by yexport files
    fs::path ProjectRoot; // root of project (by default same as ExportRoot)
    fs::path ConfigDir; // directory with additional configure for exporting (yexport.toml)
    std::string ProjectName;
    TVector<fs::path> SemGraphs;
    TVector<std::string> Platforms;
    std::string Generator;

    bool CleanIgnored = false;
    bool ReportIgnored = false;
    TDumpOpts DumpOpts;
    TDebugOpts DebugOpts;

    TLoggingOpts LoggingOpts;

    fs::path PyDepsDump;
    std::string PyVer = "py3";

    bool List = false; // Output a list of generators
    bool Valid = false; // Options object valid

    static TOpts Parse(int argc, char** argv);

protected:
    bool Check();
};

}
