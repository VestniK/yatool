when ($OS_LINUX == "yes" && $ARCH_X86_64 == "yes") {
    RUST_ARCH=x86_64
    RUST_ABI=unknown-linux-gnu
}
elsewhen ($OS_DARWIN == "yes" && $ARCH_ARM64 == "yes") {
    # TODO
    RUST_ARCH=
    RUST_ABI=
}
elsewhen ($OS_DARWIN == "yes" && $ARCH_X86_64 == "yes") {
    # TODO
    RUST_ARCH=
    RUST_ABI=
}
RUST_TARGET=${RUST_ARCH}-${RUST_ABI}
RUST_STD=${RUST_RESOURCE_GLOBAL}/rust-std-$RUST_TARGET/lib/rustlib/$RUST_TARGET/lib

module _RUST_UNIT {
    .DEFAULT_NAME_GENERATOR=DirName
    .ARGS_PARSER=Base
    .STRUCT_CMD=yes
    .EXTS=.rs
    .PEERDIR_POLICY=as_build_from
    .NODE_TYPE=Bundle
    .CMD=${RUST_RESOURCE_GLOBAL}/rustc/bin/rustc --help

    PEERDIR+=build/platform/rust
    PEERDIR+=$YMAKE_PYTHON3_PEERDIR
}

_GATHER_CRATES_DEPS=$FS_TOOLS md ${BINDIR}/deps && $FS_TOOLS link_or_copy_to_dir --no-check ${ext=.rlib:PEERS} ${BINDIR}/deps
macro _COMPILE_RUST(Src, Tgt, EDITION="2024", FLAGS[]) {
    .CMD=${RUST_RESOURCE_GLOBAL}/rustc/bin/rustc -o $Tgt $FLAGS --edition $EDITION ${input:Src} ${hide;input;glob:"src/**/*.rs"} ${hide:AUTO_INPUTS} -L ${RUST_STD} -L ${BINDIR}/deps
}

module RUST_PROGRAM: _RUST_UNIT {
    .PROXY=yes
    .FINAL_TARGET=yes
    .NODE_TYPE=Program
    .CMD=$_GATHER_CRATES_DEPS && $_COMPILE_RUST(src/main.rs $TARGET)
}

module RUST_CRATE: _RUST_UNIT {
    .FINAL_TARGET=no
    .CMD=$_GATHER_CRATES_DEPS && $_COMPILE_RUST(src/lib.rs $TARGET EDITION $USE_RUST_EDITION FLAGS --crate-name $REALPRJNAME --crate-type rlib)

    ENABLE(PASS_PEERSS)
    MODULE_SUFFIX=.rlib
    MODULE_PREFIX=lib
}

module RUST_LIBRARY: _RUST_UNIT {
    .FINAL_TARGET=no
    .NODE_TYPE=Library
    .PROXY=yes
    .CMD=$_GATHER_CRATES_DEPS && $_COMPILE_RUST(src/lib.rs $TARGET EDITION $USE_RUST_EDITION FLAGS --crate-name $REALPRJNAME --crate-type staticlib)

    DISABLE(PASS_PEERSS)
    MODULE_SUFFIX=.a
    MODULE_PREFIX=lib
}

USE_RUST_EDITION=2024
macro RUST_EDITION(Val) {
    SET(USE_RUST_EDITION $Val)
}
